@page "/"
@using OptionsPicker.Models
@using OptionsPicker.Services
@inject IStateManager StateManager
@implements IDisposable

<PageTitle>Options Picker</PageTitle>

<div class="app-container">
    <header class="app-header">
        <h1>🎯 Options Picker</h1>
        <p>Create weighted options and let the wheel decide!</p>
    </header>

    <main>
        <OptionsManager @ref="optionsManager" />
        <SpinningWheel Options="currentOptions" OnOptionSelected="HandleWheelSelection" />
        <SelectionPanel Options="currentOptions" />
        <ImportExport />
    </main>
</div>

@code {
    private OptionsManager? optionsManager;
    private IReadOnlyList<Option> currentOptions = new List<Option>();

    protected override void OnInitialized()
    {
        StateManager.OptionsChanged += OnOptionsChanged;
        currentOptions = StateManager.CurrentOptions;
    }

    private void OnOptionsChanged(object? sender, IReadOnlyList<Option> options)
    {
        currentOptions = options;
        InvokeAsync(StateHasChanged);
    }

    private void HandleWheelSelection(Option selectedOption)
    {
        // The wheel handles its own selection logic
        // This could trigger additional effects or logging if needed
        Console.WriteLine($"Wheel selected: {selectedOption.Name}");
    }

    public void Dispose()
    {
        StateManager.OptionsChanged -= OnOptionsChanged;
    }
}
